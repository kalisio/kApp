import{_ as e,o,c as a,Q as r}from"./chunks/framework.d2db4bec.js";const b=JSON.parse('{"title":"Develop your app","description":"","frontmatter":{},"headers":[],"relativePath":"guides/development/develop.md","filePath":"guides/development/develop.md"}'),n={name:"guides/development/develop.md"},s=r(`<h1 id="develop-your-app" tabindex="-1">Develop your app <a class="header-anchor" href="#develop-your-app" aria-label="Permalink to &quot;Develop your app&quot;">​</a></h1><p>The <strong>kApp</strong> provides the basic structure and tools to build and run a KDK-based application. We detail the main commands in the following sections.</p><h2 id="web-app" tabindex="-1">Web app <a class="header-anchor" href="#web-app" aria-label="Permalink to &quot;Web app&quot;">​</a></h2><h3 id="running-for-development" tabindex="-1">Running for development <a class="header-anchor" href="#running-for-development" aria-label="Permalink to &quot;Running for development&quot;">​</a></h3><p>Run the frontend app (from root project folder): <code>$ yarn dev</code></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Run the frontend app as a <strong>PWA</strong> (from root project folder): <code>$ yarn pwa:dev</code></p></div><p>Then from the backend <code>api</code> folder run the server-side app: <code>$ yarn dev</code></p><p>Then point your browser to <a href="http://localhost:8080" target="_blank" rel="noreferrer">localhost:8080</a>.</p><h3 id="building-for-production" tabindex="-1">Building for production <a class="header-anchor" href="#building-for-production" aria-label="Permalink to &quot;Building for production&quot;">​</a></h3><p>Build the frontend app (from root project folder): <code>$ yarn build</code>.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Build the frontend app as a <strong>PWA</strong> (from root project folder): <code>$ yarn pwa:build</code></p></div><p>Then from the backend <code>api</code> folder build the server-side app: <code>$ yarn build</code></p><h3 id="running-in-production" tabindex="-1">Running in production <a class="header-anchor" href="#running-in-production" aria-label="Permalink to &quot;Running in production&quot;">​</a></h3><blockquote><p>Make sure you built your app first</p></blockquote><p>From the backend <code>api</code> folder run the server-side Feathers app, this will also serve the frontend Quasar app : <code>$ yarn prod</code></p><p>Then point your browser to <a href="http://localhost:8081" target="_blank" rel="noreferrer">localhost:8081</a>.</p><h3 id="linting-the-code" tabindex="-1">Linting the code <a class="header-anchor" href="#linting-the-code" aria-label="Permalink to &quot;Linting the code&quot;">​</a></h3><p>As the KDK, the kApp relies on <a href="https://github.com/feross/standard" target="_blank" rel="noreferrer">JavaScript standard style</a>.</p><p>To lint the code (from root project folder or the backend <code>api</code> folder):</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$yarn lint</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$yarn lint</span></span></code></pre></div><h3 id="debugging" tabindex="-1">Debugging <a class="header-anchor" href="#debugging" aria-label="Permalink to &quot;Debugging&quot;">​</a></h3><p>Use <a href="https://medium.com/@paul_irish/debugging-node-js-nightlies-with-chrome-devtools-7c4a1b95ae27" target="_blank" rel="noreferrer">Chrome DevTools</a>, look at this <a href="https://www.youtube.com/watch?v=Xb_0awoShR8" target="_blank" rel="noreferrer">tutorial video</a>. Usually you simply have to open <code>chrome://inspect</code> in the Chrome URL.</p><p>If you want to launch a specific test use: <code>yarn mocha -- --grep &quot;My test&quot;</code>.</p><p>If you want to pause the debugger when running the tests this should do it: <code>yarn mocha -- --inspect-brk</code>.</p><p>If you want to debug replicas you can use the following environment variables to launch two instances of your apps:</p><ul><li><strong>PORT / HTTPS_PORT</strong>: API server port for HTTP and HTTPS modes</li><li><strong>CLIENT_PORT / HTTPS_CLIENT_PORT</strong>: frontend server port for HTTP and HTTPS modes</li></ul><p>For the backend run one instance with <code>$ yarn dev</code> and the other one with <code>$ yarn dev:replica</code> (this will use another port for the Node.js debugger on the second instance and avoid conflict).</p><p>Look at this <a href="https://washamdev.com/debug-a-website-in-ios-safari-on-windows/" target="_blank" rel="noreferrer">tutorial</a> will you need to debug the app in Safari from a Windows developmen environment.</p><h3 id="remote-debugging" tabindex="-1">Remote debugging <a class="header-anchor" href="#remote-debugging" aria-label="Permalink to &quot;Remote debugging&quot;">​</a></h3><p>Notably useful to debug your app running on a mobile device.</p><p>For this you need to <a href="https://developer.chrome.com/docs/devtools/remote-debugging/" target="_blank" rel="noreferrer">enable remote debug on your Android device</a>.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>For PWA you will need to setup port forwarding so that you can use the same <code>http:\\\\localhost:port</code> adress on your device as on your PC, otherwise you will not be able to install the application.</p></div><h2 id="cordova-wrapper" tabindex="-1">Cordova wrapper <a class="header-anchor" href="#cordova-wrapper" aria-label="Permalink to &quot;Cordova wrapper&quot;">​</a></h2><p><a href="https://quasar.dev/quasar-cli/developing-cordova-apps/introduction" target="_blank" rel="noreferrer">Quasar guide</a> might help.</p><h3 id="running-for-development-1" tabindex="-1">Running for development <a class="header-anchor" href="#running-for-development-1" aria-label="Permalink to &quot;Running for development&quot;">​</a></h3><p>Run your web app as usual first, then build and run the mobile app in debug mode (from project folder):</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Android</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">yarn</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cordova:dev:android</span></span>
<span class="line"><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">iOS</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">yarn</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cordova:dev:ios</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Android</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">yarn</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cordova:dev:android</span></span>
<span class="line"><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">iOS</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">yarn</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cordova:dev:ios</span></span></code></pre></div><p>If no device is connected this should launch the emulator, otherwise this should use your device.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Check that the <a href="https://developer.android.com/studio/command-line/adb.html" target="_blank" rel="noreferrer"><code>adb</code> daemon</a> is running and that you authorized USB debug on your device. Use <code>adb devices</code> to check if your device is here, if you see it in <code>unauthorised</code> state uncheck/check again the USB debug option on your device.</p></div><p>Information about the <a href="https://developer.android.com/studio/run/emulator-networking.html" target="_blank" rel="noreferrer">Android Emulator Networking</a> might be useful.</p><p>When running the app through Cordova the <code>domain</code> entry of the client-side config file is used to know how to contact the remote API service:</p><ul><li>use <a href="http://10.0.2.2:8081" target="_blank" rel="noreferrer">http://10.0.2.2:8081</a> in the emulator which is an alias to host loopback interface</li><li>use eg <a href="http://192.168.1.16:8081" target="_blank" rel="noreferrer">http://192.168.1.16:8081</a> in your device which is the IP affected by your router to your localhost (use <code>ipconfig /all</code> under Windows or <code>ifconfig</code> under Linux to get it)</li><li>use <a href="https://developers.google.com/web/tools/chrome-devtools/remote-debugging/local-server" target="_blank" rel="noreferrer">port forwarding</a></li></ul><h3 id="building-for-production-1" tabindex="-1">Building for production <a class="header-anchor" href="#building-for-production-1" aria-label="Permalink to &quot;Building for production&quot;">​</a></h3><p>Build the app in release mode (from project folder):</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Android</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">yarn</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cordova:build:android</span></span>
<span class="line"><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">iOS</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">yarn</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cordova:build:ios</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Android</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">yarn</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cordova:build:android</span></span>
<span class="line"><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">iOS</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">yarn</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cordova:build:ios</span></span></code></pre></div><h3 id="debug" tabindex="-1">Debug <a class="header-anchor" href="#debug" aria-label="Permalink to &quot;Debug&quot;">​</a></h3><p>Use <a href="https://developers.google.com/web/tools/chrome-devtools/remote-debugging/" target="_blank" rel="noreferrer">Chrome DevTools</a> for the WebView. If you want to also get native errors without running Android Studio use <a href="https://ourcodeworld.com/articles/read/295/how-to-debug-java-code-in-a-Cordova-android-application-from-your-device-using-adb-in-windows" target="_blank" rel="noreferrer">logcat</a>.</p><p>If you&#39;d like to debug similarly your iOS Webview you can use the <a href="https://github.com/RemoteDebug/remotedebug-ios-webkit-adapter" target="_blank" rel="noreferrer">remotedebug-ios-webkit-adapter</a> under Windows.</p><h3 id="icons-splashscreens" tabindex="-1">Icons &amp; Splashscreens <a class="header-anchor" href="#icons-splashscreens" aria-label="Permalink to &quot;Icons &amp; Splashscreens&quot;">​</a></h3><p>It does exist a couple of solutions to generate it for your app:</p><ul><li><a href="https://github.com/eberlitz/splashicon-generator" target="_blank" rel="noreferrer">splashicon-generator</a></li><li><a href="https://www.npmjs.com/package/Cordova-gen-icon" target="_blank" rel="noreferrer">Cordova-gen-icon</a></li><li><a href="https://www.javascripttuts.com/how-to-automatically-generate-icons-and-splash-screens-with-the-ionic-cli/" target="_blank" rel="noreferrer">Ionic CLI</a></li><li><a href="https://github.com/AlexDisler/Cordova-icon" target="_blank" rel="noreferrer">Cordova-icon</a></li></ul><p>You will find the example model icon/splash in <em>Cordova/model</em> so that running <a href="https://github.com/eberlitz/splashicon-generator" target="_blank" rel="noreferrer">splashicon-generator</a> in the <em>Cordova</em> directory should work. <strong>Under windows</strong> take care to <a href="https://github.com/eberlitz/splashicon-generator/issues/23" target="_blank" rel="noreferrer">this issue</a>.</p><h3 id="plugins" tabindex="-1">Plugins <a class="header-anchor" href="#plugins" aria-label="Permalink to &quot;Plugins&quot;">​</a></h3><p>We rely on a bunch of Cordova plugins so it might be useful to refer to their specific issues:</p><ul><li><a href="https://github.com/apache/Cordova-plugin-device" target="_blank" rel="noreferrer">Cordova-plugin-device</a></li><li><a href="https://github.com/phonegap/phonegap-plugin-push" target="_blank" rel="noreferrer">phonegap-plugin-push</a></li><li><a href="https://github.com/apache/Cordova-plugin-geolocation" target="_blank" rel="noreferrer">Cordova-plugin-geolocation</a></li><li><a href="https://github.com/crosswalk-project/Cordova-plugin-crosswalk-webview" target="_blank" rel="noreferrer">Cordova-plugin-crosswalk-webview</a></li></ul><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>The Crosswalk project seems to be <a href="https://crosswalk-project.org/blog/crosswalk-final-release.html" target="_blank" rel="noreferrer">discontinued</a>, as a consequence there are some issues with recent Cordova versions like <a href="https://github.com/apache/Cordova-android/pull/417" target="_blank" rel="noreferrer">this</a>. We will probably drop it soon.</p></div>`,56),t=[s];function l(p,i,c,d,h,u){return o(),a("div",null,t)}const f=e(n,[["render",l]]);export{b as __pageData,f as default};
